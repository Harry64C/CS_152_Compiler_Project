Grammar

    0 $accept: prog_start $end

    1 prog_start: functions

    2 functions: function functions
    3          | %empty

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    5 function_ident: IDENTIFIER

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | INTEGER IDENTIFIER

   10 statements: %empty
   11           | statement SEMICOLON statements
   12           | nonsemicolonstatement statements

   13 statement: declaration
   14          | assignment
   15          | function_call
   16          | BREAK
   17          | WRITE BEGIN_PARAM equations END_PARAM
   18          | CONTINUE
   19          | RETURN equations

   20 nonsemicolonstatement: if_start
   21                      | until_loop

   22 declaration: INTEGER IDENTIFIER
   23            | INTEGER IDENTIFIER ASSIGN equations
   24            | ARRAY IDENTIFIER L_PAREN factor R_PAREN
   25            | INTEGER IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM

   26 assignment: IDENTIFIER ASSIGN equations
   27           | arraycall ASSIGN equations
   28           | IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM

   29 arraycall: IDENTIFIER L_PAREN factor R_PAREN

   30 equations: equations addop term
   31          | term

   32 addop: ADD
   33      | SUBTRACT
   34      | EQ
   35      | GTE
   36      | LTE
   37      | NEQ
   38      | GT
   39      | LT

   40 term: term mulop factor
   41     | factor

   42 mulop: MULTIPLY
   43      | DIVISION
   44      | MOD
   45      | AND
   46      | OR

   47 factor: L_PAREN equations R_PAREN
   48       | INTEGER
   49       | IDENTIFIER
   50       | NUMBER
   51       | function_call
   52       | arraycall

   53 function_call: IDENTIFIER BEGIN_PARAM params END_PARAM

   54 params: param
   55       | param COMMA params
   56       | %empty

   57 param: IDENTIFIER
   58      | NUMBER

   59 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY branch_check

   60 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY else_check
   61             | else_check

   62 else_check: %empty
   63           | ELSE BEGIN_BODY statements END_BODY

   64 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 4 9 22 23 25 48
ARRAY (259) 24
FUNCTION (260) 4
ASSIGN (261) 23 25 26 27 28
ADD (262) 32
SUBTRACT (263) 33
MULTIPLY (264) 42
DIVISION (265) 43
MOD (266) 44
EQ (267) 34
GTE (268) 35
LTE (269) 36
NEQ (270) 37
GT (271) 38
LT (272) 39
BEGIN_BODY (273) 4 59 60 63 64
END_BODY (274) 4 59 60 63 64
BEGIN_PARAM (275) 4 17 25 28 53 59 60 64
END_PARAM (276) 4 17 25 28 53 59 60 64
L_PAREN (277) 24 29 47
R_PAREN (278) 24 29 47
IF (279) 59
ELSE (280) 63
ELSE_IF (281) 60
WHILE (282) 64
BREAK (283) 16
CONTINUE (284) 18
READ (285) 25 28
WRITE (286) 17
RETURN (287) 19
SEMICOLON (288) 11
COMMA (289) 7 55
AND (290) 45
OR (291) 46
NUMBER (292) 50 58
IDENTIFIER (293) 5 9 22 23 24 25 26 28 29 49 53 57


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
prog_start (40)
    on left: 1, on right: 0
functions (41)
    on left: 2 3, on right: 1 2
function (42)
    on left: 4, on right: 2
function_ident (43)
    on left: 5, on right: 4
arguments (44)
    on left: 6 7, on right: 4 7
argument (45)
    on left: 8 9, on right: 6 7
statements (46)
    on left: 10 11 12, on right: 4 11 12 59 60 63 64
statement (47)
    on left: 13 14 15 16 17 18 19, on right: 11
nonsemicolonstatement (48)
    on left: 20 21, on right: 12
declaration (49)
    on left: 22 23 24 25, on right: 13
assignment (50)
    on left: 26 27 28, on right: 14
arraycall (51)
    on left: 29, on right: 27 52
equations (52)
    on left: 30 31, on right: 17 19 23 26 27 30 47 59 60 64
addop (53)
    on left: 32 33 34 35 36 37 38 39, on right: 30
term (54)
    on left: 40 41, on right: 30 31 40
mulop (55)
    on left: 42 43 44 45 46, on right: 40
factor (56)
    on left: 47 48 49 50 51 52, on right: 24 29 40 41
function_call (57)
    on left: 53, on right: 15 51
params (58)
    on left: 54 55 56, on right: 53 55
param (59)
    on left: 57 58, on right: 54 55
if_start (60)
    on left: 59, on right: 20
branch_check (61)
    on left: 60 61, on right: 59
else_check (62)
    on left: 62 63, on right: 60 61
until_loop (63)
    on left: 64, on right: 21


State 0

    0 $accept: . prog_start $end

    INTEGER  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    4 function: INTEGER . FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    FUNCTION  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 4

    2 functions: function . functions

    INTEGER  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    4 function: INTEGER FUNCTION . function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    IDENTIFIER  shift, and go to state 8

    function_ident  go to state 9


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    2 functions: function functions .

    $default  reduce using rule 2 (functions)


State 8

    5 function_ident: IDENTIFIER .

    $default  reduce using rule 5 (function_ident)


State 9

    4 function: INTEGER FUNCTION function_ident . BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    BEGIN_PARAM  shift, and go to state 10


State 10

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM . arguments END_PARAM BEGIN_BODY statements END_BODY

    INTEGER  shift, and go to state 11

    $default  reduce using rule 8 (argument)

    arguments  go to state 12
    argument   go to state 13


State 11

    9 argument: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 14


State 12

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments . END_PARAM BEGIN_BODY statements END_BODY

    END_PARAM  shift, and go to state 15


State 13

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 16

    $default  reduce using rule 6 (arguments)


State 14

    9 argument: INTEGER IDENTIFIER .

    $default  reduce using rule 9 (argument)


State 15

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 17


State 16

    7 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 11

    $default  reduce using rule 8 (argument)

    arguments  go to state 18
    argument   go to state 13


State 17

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 28
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 18

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 19

   22 declaration: INTEGER . IDENTIFIER
   23            | INTEGER . IDENTIFIER ASSIGN equations
   25            | INTEGER . IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM

    IDENTIFIER  shift, and go to state 37


State 20

   24 declaration: ARRAY . IDENTIFIER L_PAREN factor R_PAREN

    IDENTIFIER  shift, and go to state 38


State 21

   59 if_start: IF . BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY branch_check

    BEGIN_PARAM  shift, and go to state 39


State 22

   64 until_loop: WHILE . BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY

    BEGIN_PARAM  shift, and go to state 40


State 23

   16 statement: BREAK .

    $default  reduce using rule 16 (statement)


State 24

   18 statement: CONTINUE .

    $default  reduce using rule 18 (statement)


State 25

   17 statement: WRITE . BEGIN_PARAM equations END_PARAM

    BEGIN_PARAM  shift, and go to state 41


State 26

   19 statement: RETURN . equations

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 47
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 27

   26 assignment: IDENTIFIER . ASSIGN equations
   28           | IDENTIFIER . ASSIGN READ BEGIN_PARAM END_PARAM
   29 arraycall: IDENTIFIER . L_PAREN factor R_PAREN
   53 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM

    ASSIGN       shift, and go to state 51
    BEGIN_PARAM  shift, and go to state 52
    L_PAREN      shift, and go to state 53


State 28

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 54


State 29

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 55


State 30

   12 statements: nonsemicolonstatement . statements

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 56
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 31

   13 statement: declaration .

    $default  reduce using rule 13 (statement)


State 32

   14 statement: assignment .

    $default  reduce using rule 14 (statement)


State 33

   27 assignment: arraycall . ASSIGN equations

    ASSIGN  shift, and go to state 57


State 34

   15 statement: function_call .

    $default  reduce using rule 15 (statement)


State 35

   20 nonsemicolonstatement: if_start .

    $default  reduce using rule 20 (nonsemicolonstatement)


State 36

   21 nonsemicolonstatement: until_loop .

    $default  reduce using rule 21 (nonsemicolonstatement)


State 37

   22 declaration: INTEGER IDENTIFIER .
   23            | INTEGER IDENTIFIER . ASSIGN equations
   25            | INTEGER IDENTIFIER . ASSIGN READ BEGIN_PARAM END_PARAM

    ASSIGN  shift, and go to state 58

    $default  reduce using rule 22 (declaration)


State 38

   24 declaration: ARRAY IDENTIFIER . L_PAREN factor R_PAREN

    L_PAREN  shift, and go to state 59


State 39

   59 if_start: IF BEGIN_PARAM . equations END_PARAM BEGIN_BODY statements END_BODY branch_check

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 60
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 40

   64 until_loop: WHILE BEGIN_PARAM . equations END_PARAM BEGIN_BODY statements END_BODY

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 61
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 41

   17 statement: WRITE BEGIN_PARAM . equations END_PARAM

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 62
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 42

   48 factor: INTEGER .

    $default  reduce using rule 48 (factor)


State 43

   47 factor: L_PAREN . equations R_PAREN

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 63
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 44

   50 factor: NUMBER .

    $default  reduce using rule 50 (factor)


State 45

   29 arraycall: IDENTIFIER . L_PAREN factor R_PAREN
   49 factor: IDENTIFIER .
   53 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM

    BEGIN_PARAM  shift, and go to state 52
    L_PAREN      shift, and go to state 53

    $default  reduce using rule 49 (factor)


State 46

   52 factor: arraycall .

    $default  reduce using rule 52 (factor)


State 47

   19 statement: RETURN equations .
   30 equations: equations . addop term

    ADD       shift, and go to state 64
    SUBTRACT  shift, and go to state 65
    EQ        shift, and go to state 66
    GTE       shift, and go to state 67
    LTE       shift, and go to state 68
    NEQ       shift, and go to state 69
    GT        shift, and go to state 70
    LT        shift, and go to state 71

    $default  reduce using rule 19 (statement)

    addop  go to state 72


State 48

   31 equations: term .
   40 term: term . mulop factor

    MULTIPLY  shift, and go to state 73
    DIVISION  shift, and go to state 74
    MOD       shift, and go to state 75
    AND       shift, and go to state 76
    OR        shift, and go to state 77

    $default  reduce using rule 31 (equations)

    mulop  go to state 78


State 49

   41 term: factor .

    $default  reduce using rule 41 (term)


State 50

   51 factor: function_call .

    $default  reduce using rule 51 (factor)


State 51

   26 assignment: IDENTIFIER ASSIGN . equations
   28           | IDENTIFIER ASSIGN . READ BEGIN_PARAM END_PARAM

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    READ        shift, and go to state 79
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 80
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 52

   53 function_call: IDENTIFIER BEGIN_PARAM . params END_PARAM

    NUMBER      shift, and go to state 81
    IDENTIFIER  shift, and go to state 82

    $default  reduce using rule 56 (params)

    params  go to state 83
    param   go to state 84


State 53

   29 arraycall: IDENTIFIER L_PAREN . factor R_PAREN

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    factor         go to state 85
    function_call  go to state 50


State 54

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY .

    $default  reduce using rule 4 (function)


State 55

   11 statements: statement SEMICOLON . statements

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 86
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 56

   12 statements: nonsemicolonstatement statements .

    $default  reduce using rule 12 (statements)


State 57

   27 assignment: arraycall ASSIGN . equations

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 87
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 58

   23 declaration: INTEGER IDENTIFIER ASSIGN . equations
   25            | INTEGER IDENTIFIER ASSIGN . READ BEGIN_PARAM END_PARAM

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    READ        shift, and go to state 88
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 89
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 59

   24 declaration: ARRAY IDENTIFIER L_PAREN . factor R_PAREN

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    factor         go to state 90
    function_call  go to state 50


State 60

   30 equations: equations . addop term
   59 if_start: IF BEGIN_PARAM equations . END_PARAM BEGIN_BODY statements END_BODY branch_check

    ADD        shift, and go to state 64
    SUBTRACT   shift, and go to state 65
    EQ         shift, and go to state 66
    GTE        shift, and go to state 67
    LTE        shift, and go to state 68
    NEQ        shift, and go to state 69
    GT         shift, and go to state 70
    LT         shift, and go to state 71
    END_PARAM  shift, and go to state 91

    addop  go to state 72


State 61

   30 equations: equations . addop term
   64 until_loop: WHILE BEGIN_PARAM equations . END_PARAM BEGIN_BODY statements END_BODY

    ADD        shift, and go to state 64
    SUBTRACT   shift, and go to state 65
    EQ         shift, and go to state 66
    GTE        shift, and go to state 67
    LTE        shift, and go to state 68
    NEQ        shift, and go to state 69
    GT         shift, and go to state 70
    LT         shift, and go to state 71
    END_PARAM  shift, and go to state 92

    addop  go to state 72


State 62

   17 statement: WRITE BEGIN_PARAM equations . END_PARAM
   30 equations: equations . addop term

    ADD        shift, and go to state 64
    SUBTRACT   shift, and go to state 65
    EQ         shift, and go to state 66
    GTE        shift, and go to state 67
    LTE        shift, and go to state 68
    NEQ        shift, and go to state 69
    GT         shift, and go to state 70
    LT         shift, and go to state 71
    END_PARAM  shift, and go to state 93

    addop  go to state 72


State 63

   30 equations: equations . addop term
   47 factor: L_PAREN equations . R_PAREN

    ADD       shift, and go to state 64
    SUBTRACT  shift, and go to state 65
    EQ        shift, and go to state 66
    GTE       shift, and go to state 67
    LTE       shift, and go to state 68
    NEQ       shift, and go to state 69
    GT        shift, and go to state 70
    LT        shift, and go to state 71
    R_PAREN   shift, and go to state 94

    addop  go to state 72


State 64

   32 addop: ADD .

    $default  reduce using rule 32 (addop)


State 65

   33 addop: SUBTRACT .

    $default  reduce using rule 33 (addop)


State 66

   34 addop: EQ .

    $default  reduce using rule 34 (addop)


State 67

   35 addop: GTE .

    $default  reduce using rule 35 (addop)


State 68

   36 addop: LTE .

    $default  reduce using rule 36 (addop)


State 69

   37 addop: NEQ .

    $default  reduce using rule 37 (addop)


State 70

   38 addop: GT .

    $default  reduce using rule 38 (addop)


State 71

   39 addop: LT .

    $default  reduce using rule 39 (addop)


State 72

   30 equations: equations addop . term

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    term           go to state 95
    factor         go to state 49
    function_call  go to state 50


State 73

   42 mulop: MULTIPLY .

    $default  reduce using rule 42 (mulop)


State 74

   43 mulop: DIVISION .

    $default  reduce using rule 43 (mulop)


State 75

   44 mulop: MOD .

    $default  reduce using rule 44 (mulop)


State 76

   45 mulop: AND .

    $default  reduce using rule 45 (mulop)


State 77

   46 mulop: OR .

    $default  reduce using rule 46 (mulop)


State 78

   40 term: term mulop . factor

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    factor         go to state 96
    function_call  go to state 50


State 79

   28 assignment: IDENTIFIER ASSIGN READ . BEGIN_PARAM END_PARAM

    BEGIN_PARAM  shift, and go to state 97


State 80

   26 assignment: IDENTIFIER ASSIGN equations .
   30 equations: equations . addop term

    ADD       shift, and go to state 64
    SUBTRACT  shift, and go to state 65
    EQ        shift, and go to state 66
    GTE       shift, and go to state 67
    LTE       shift, and go to state 68
    NEQ       shift, and go to state 69
    GT        shift, and go to state 70
    LT        shift, and go to state 71

    $default  reduce using rule 26 (assignment)

    addop  go to state 72


State 81

   58 param: NUMBER .

    $default  reduce using rule 58 (param)


State 82

   57 param: IDENTIFIER .

    $default  reduce using rule 57 (param)


State 83

   53 function_call: IDENTIFIER BEGIN_PARAM params . END_PARAM

    END_PARAM  shift, and go to state 98


State 84

   54 params: param .
   55       | param . COMMA params

    COMMA  shift, and go to state 99

    $default  reduce using rule 54 (params)


State 85

   29 arraycall: IDENTIFIER L_PAREN factor . R_PAREN

    R_PAREN  shift, and go to state 100


State 86

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 87

   27 assignment: arraycall ASSIGN equations .
   30 equations: equations . addop term

    ADD       shift, and go to state 64
    SUBTRACT  shift, and go to state 65
    EQ        shift, and go to state 66
    GTE       shift, and go to state 67
    LTE       shift, and go to state 68
    NEQ       shift, and go to state 69
    GT        shift, and go to state 70
    LT        shift, and go to state 71

    $default  reduce using rule 27 (assignment)

    addop  go to state 72


State 88

   25 declaration: INTEGER IDENTIFIER ASSIGN READ . BEGIN_PARAM END_PARAM

    BEGIN_PARAM  shift, and go to state 101


State 89

   23 declaration: INTEGER IDENTIFIER ASSIGN equations .
   30 equations: equations . addop term

    ADD       shift, and go to state 64
    SUBTRACT  shift, and go to state 65
    EQ        shift, and go to state 66
    GTE       shift, and go to state 67
    LTE       shift, and go to state 68
    NEQ       shift, and go to state 69
    GT        shift, and go to state 70
    LT        shift, and go to state 71

    $default  reduce using rule 23 (declaration)

    addop  go to state 72


State 90

   24 declaration: ARRAY IDENTIFIER L_PAREN factor . R_PAREN

    R_PAREN  shift, and go to state 102


State 91

   59 if_start: IF BEGIN_PARAM equations END_PARAM . BEGIN_BODY statements END_BODY branch_check

    BEGIN_BODY  shift, and go to state 103


State 92

   64 until_loop: WHILE BEGIN_PARAM equations END_PARAM . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 104


State 93

   17 statement: WRITE BEGIN_PARAM equations END_PARAM .

    $default  reduce using rule 17 (statement)


State 94

   47 factor: L_PAREN equations R_PAREN .

    $default  reduce using rule 47 (factor)


State 95

   30 equations: equations addop term .
   40 term: term . mulop factor

    MULTIPLY  shift, and go to state 73
    DIVISION  shift, and go to state 74
    MOD       shift, and go to state 75
    AND       shift, and go to state 76
    OR        shift, and go to state 77

    $default  reduce using rule 30 (equations)

    mulop  go to state 78


State 96

   40 term: term mulop factor .

    $default  reduce using rule 40 (term)


State 97

   28 assignment: IDENTIFIER ASSIGN READ BEGIN_PARAM . END_PARAM

    END_PARAM  shift, and go to state 105


State 98

   53 function_call: IDENTIFIER BEGIN_PARAM params END_PARAM .

    $default  reduce using rule 53 (function_call)


State 99

   55 params: param COMMA . params

    NUMBER      shift, and go to state 81
    IDENTIFIER  shift, and go to state 82

    $default  reduce using rule 56 (params)

    params  go to state 106
    param   go to state 84


State 100

   29 arraycall: IDENTIFIER L_PAREN factor R_PAREN .

    $default  reduce using rule 29 (arraycall)


State 101

   25 declaration: INTEGER IDENTIFIER ASSIGN READ BEGIN_PARAM . END_PARAM

    END_PARAM  shift, and go to state 107


State 102

   24 declaration: ARRAY IDENTIFIER L_PAREN factor R_PAREN .

    $default  reduce using rule 24 (declaration)


State 103

   59 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY . statements END_BODY branch_check

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 108
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 104

   64 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 109
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 105

   28 assignment: IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM .

    $default  reduce using rule 28 (assignment)


State 106

   55 params: param COMMA params .

    $default  reduce using rule 55 (params)


State 107

   25 declaration: INTEGER IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM .

    $default  reduce using rule 25 (declaration)


State 108

   59 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements . END_BODY branch_check

    END_BODY  shift, and go to state 110


State 109

   64 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 111


State 110

   59 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY . branch_check

    ELSE     shift, and go to state 112
    ELSE_IF  shift, and go to state 113

    $default  reduce using rule 62 (else_check)

    branch_check  go to state 114
    else_check    go to state 115


State 111

   64 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY .

    $default  reduce using rule 64 (until_loop)


State 112

   63 else_check: ELSE . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 116


State 113

   60 branch_check: ELSE_IF . BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY else_check

    BEGIN_PARAM  shift, and go to state 117


State 114

   59 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY branch_check .

    $default  reduce using rule 59 (if_start)


State 115

   61 branch_check: else_check .

    $default  reduce using rule 61 (branch_check)


State 116

   63 else_check: ELSE BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 118
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 117

   60 branch_check: ELSE_IF BEGIN_PARAM . equations END_PARAM BEGIN_BODY statements END_BODY else_check

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    arraycall      go to state 46
    equations      go to state 119
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 118

   63 else_check: ELSE BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 120


State 119

   30 equations: equations . addop term
   60 branch_check: ELSE_IF BEGIN_PARAM equations . END_PARAM BEGIN_BODY statements END_BODY else_check

    ADD        shift, and go to state 64
    SUBTRACT   shift, and go to state 65
    EQ         shift, and go to state 66
    GTE        shift, and go to state 67
    LTE        shift, and go to state 68
    NEQ        shift, and go to state 69
    GT         shift, and go to state 70
    LT         shift, and go to state 71
    END_PARAM  shift, and go to state 121

    addop  go to state 72


State 120

   63 else_check: ELSE BEGIN_BODY statements END_BODY .

    $default  reduce using rule 63 (else_check)


State 121

   60 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM . BEGIN_BODY statements END_BODY else_check

    BEGIN_BODY  shift, and go to state 122


State 122

   60 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY . statements END_BODY else_check

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 123
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 123

   60 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements . END_BODY else_check

    END_BODY  shift, and go to state 124


State 124

   60 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY . else_check

    ELSE  shift, and go to state 112

    $default  reduce using rule 62 (else_check)

    else_check  go to state 125


State 125

   60 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY else_check .

    $default  reduce using rule 60 (branch_check)
