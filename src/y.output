Terminals unused in grammar

   DOT


Grammar

    0 $accept: prog_start $end

    1 prog_start: functions

    2 functions: function functions
    3          | %empty

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    5 function_ident: IDENTIFIER

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | INTEGER IDENTIFIER

   10 statements: %empty
   11           | statement SEMICOLON statements
   12           | nonsemicolonstatement statements

   13 statement: declaration
   14          | assignment
   15          | function_call
   16          | BREAK
   17          | WRITE BEGIN_PARAM equations END_PARAM
   18          | CONTINUE
   19          | RETURN equations

   20 nonsemicolonstatement: if_start
   21                      | until_loop

   22 declaration: INTEGER IDENTIFIER
   23            | INTEGER IDENTIFIER ASSIGN equations
   24            | ARRAY IDENTIFIER L_PAREN factor R_PAREN
   25            | INTEGER IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM

   26 assignment: IDENTIFIER ASSIGN equations
   27           | arraycall ASSIGN equations
   28           | IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM

   29 arraycall: IDENTIFIER L_PAREN param R_PAREN

   30 equations: term equationsp

   31 equationsp: addop term equationsp
   32           | %empty

   33 addop: ADD
   34      | SUBTRACT
   35      | EQ
   36      | GTE
   37      | LTE
   38      | NEQ
   39      | GT
   40      | LT

   41 term: factor termp

   42 termp: mulop factor termp
   43      | %empty

   44 mulop: MULTIPLY
   45      | DIVISION
   46      | MOD
   47      | AND
   48      | OR

   49 factor: L_PAREN equations R_PAREN
   50       | INTEGER
   51       | IDENTIFIER
   52       | NUMBER
   53       | function_call

   54 function_call: IDENTIFIER BEGIN_PARAM params END_PARAM

   55 params: param
   56       | param COMMA params
   57       | %empty

   58 param: IDENTIFIER
   59      | NUMBER

   60 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY branch_check

   61 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY else_check
   62             | else_check

   63 else_check: %empty
   64           | ELSE BEGIN_BODY statements END_BODY

   65 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 4 9 22 23 25 50
ARRAY (259) 24
FUNCTION (260) 4
ASSIGN (261) 23 25 26 27 28
ADD (262) 33
SUBTRACT (263) 34
MULTIPLY (264) 44
DIVISION (265) 45
MOD (266) 46
EQ (267) 35
GTE (268) 36
LTE (269) 37
NEQ (270) 38
GT (271) 39
LT (272) 40
BEGIN_BODY (273) 4 60 61 64 65
END_BODY (274) 4 60 61 64 65
BEGIN_PARAM (275) 4 17 25 28 54 60 61 65
END_PARAM (276) 4 17 25 28 54 60 61 65
L_PAREN (277) 24 29 49
R_PAREN (278) 24 29 49
IF (279) 60
ELSE (280) 64
ELSE_IF (281) 61
WHILE (282) 65
BREAK (283) 16
CONTINUE (284) 18
READ (285) 25 28
WRITE (286) 17
RETURN (287) 19
SEMICOLON (288) 11
COMMA (289) 7 56
AND (290) 47
OR (291) 48
DOT (292)
NUMBER (293) 52 59
IDENTIFIER (294) 5 9 22 23 24 25 26 28 29 51 54 58


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
prog_start (41)
    on left: 1, on right: 0
functions (42)
    on left: 2 3, on right: 1 2
function (43)
    on left: 4, on right: 2
function_ident (44)
    on left: 5, on right: 4
arguments (45)
    on left: 6 7, on right: 4 7
argument (46)
    on left: 8 9, on right: 6 7
statements (47)
    on left: 10 11 12, on right: 4 11 12 60 61 64 65
statement (48)
    on left: 13 14 15 16 17 18 19, on right: 11
nonsemicolonstatement (49)
    on left: 20 21, on right: 12
declaration (50)
    on left: 22 23 24 25, on right: 13
assignment (51)
    on left: 26 27 28, on right: 14
arraycall (52)
    on left: 29, on right: 27
equations (53)
    on left: 30, on right: 17 19 23 26 27 49 60 61 65
equationsp (54)
    on left: 31 32, on right: 30 31
addop (55)
    on left: 33 34 35 36 37 38 39 40, on right: 31
term (56)
    on left: 41, on right: 30 31
termp (57)
    on left: 42 43, on right: 41 42
mulop (58)
    on left: 44 45 46 47 48, on right: 42
factor (59)
    on left: 49 50 51 52 53, on right: 24 41 42
function_call (60)
    on left: 54, on right: 15 53
params (61)
    on left: 55 56 57, on right: 54 56
param (62)
    on left: 58 59, on right: 29 55 56
if_start (63)
    on left: 60, on right: 20
branch_check (64)
    on left: 61 62, on right: 60
else_check (65)
    on left: 63 64, on right: 61 62
until_loop (66)
    on left: 65, on right: 21


State 0

    0 $accept: . prog_start $end

    INTEGER  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    4 function: INTEGER . FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    FUNCTION  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    1 prog_start: functions .

    $default  reduce using rule 1 (prog_start)


State 4

    2 functions: function . functions

    INTEGER  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    4 function: INTEGER FUNCTION . function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    IDENTIFIER  shift, and go to state 8

    function_ident  go to state 9


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    2 functions: function functions .

    $default  reduce using rule 2 (functions)


State 8

    5 function_ident: IDENTIFIER .

    $default  reduce using rule 5 (function_ident)


State 9

    4 function: INTEGER FUNCTION function_ident . BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    BEGIN_PARAM  shift, and go to state 10


State 10

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM . arguments END_PARAM BEGIN_BODY statements END_BODY

    INTEGER  shift, and go to state 11

    $default  reduce using rule 8 (argument)

    arguments  go to state 12
    argument   go to state 13


State 11

    9 argument: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 14


State 12

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments . END_PARAM BEGIN_BODY statements END_BODY

    END_PARAM  shift, and go to state 15


State 13

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 16

    $default  reduce using rule 6 (arguments)


State 14

    9 argument: INTEGER IDENTIFIER .

    $default  reduce using rule 9 (argument)


State 15

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 17


State 16

    7 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 11

    $default  reduce using rule 8 (argument)

    arguments  go to state 18
    argument   go to state 13


State 17

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 28
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 18

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 19

   22 declaration: INTEGER . IDENTIFIER
   23            | INTEGER . IDENTIFIER ASSIGN equations
   25            | INTEGER . IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM

    IDENTIFIER  shift, and go to state 37


State 20

   24 declaration: ARRAY . IDENTIFIER L_PAREN factor R_PAREN

    IDENTIFIER  shift, and go to state 38


State 21

   60 if_start: IF . BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY branch_check

    BEGIN_PARAM  shift, and go to state 39


State 22

   65 until_loop: WHILE . BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY

    BEGIN_PARAM  shift, and go to state 40


State 23

   16 statement: BREAK .

    $default  reduce using rule 16 (statement)


State 24

   18 statement: CONTINUE .

    $default  reduce using rule 18 (statement)


State 25

   17 statement: WRITE . BEGIN_PARAM equations END_PARAM

    BEGIN_PARAM  shift, and go to state 41


State 26

   19 statement: RETURN . equations

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 46
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 27

   26 assignment: IDENTIFIER . ASSIGN equations
   28           | IDENTIFIER . ASSIGN READ BEGIN_PARAM END_PARAM
   29 arraycall: IDENTIFIER . L_PAREN param R_PAREN
   54 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM

    ASSIGN       shift, and go to state 50
    BEGIN_PARAM  shift, and go to state 51
    L_PAREN      shift, and go to state 52


State 28

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 53


State 29

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 54


State 30

   12 statements: nonsemicolonstatement . statements

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 55
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 31

   13 statement: declaration .

    $default  reduce using rule 13 (statement)


State 32

   14 statement: assignment .

    $default  reduce using rule 14 (statement)


State 33

   27 assignment: arraycall . ASSIGN equations

    ASSIGN  shift, and go to state 56


State 34

   15 statement: function_call .

    $default  reduce using rule 15 (statement)


State 35

   20 nonsemicolonstatement: if_start .

    $default  reduce using rule 20 (nonsemicolonstatement)


State 36

   21 nonsemicolonstatement: until_loop .

    $default  reduce using rule 21 (nonsemicolonstatement)


State 37

   22 declaration: INTEGER IDENTIFIER .
   23            | INTEGER IDENTIFIER . ASSIGN equations
   25            | INTEGER IDENTIFIER . ASSIGN READ BEGIN_PARAM END_PARAM

    ASSIGN  shift, and go to state 57

    $default  reduce using rule 22 (declaration)


State 38

   24 declaration: ARRAY IDENTIFIER . L_PAREN factor R_PAREN

    L_PAREN  shift, and go to state 58


State 39

   60 if_start: IF BEGIN_PARAM . equations END_PARAM BEGIN_BODY statements END_BODY branch_check

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 59
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 40

   65 until_loop: WHILE BEGIN_PARAM . equations END_PARAM BEGIN_BODY statements END_BODY

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 60
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 41

   17 statement: WRITE BEGIN_PARAM . equations END_PARAM

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 61
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 42

   50 factor: INTEGER .

    $default  reduce using rule 50 (factor)


State 43

   49 factor: L_PAREN . equations R_PAREN

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 62
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 44

   52 factor: NUMBER .

    $default  reduce using rule 52 (factor)


State 45

   51 factor: IDENTIFIER .
   54 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM

    BEGIN_PARAM  shift, and go to state 51

    $default  reduce using rule 51 (factor)


State 46

   19 statement: RETURN equations .

    $default  reduce using rule 19 (statement)


State 47

   30 equations: term . equationsp

    ADD       shift, and go to state 63
    SUBTRACT  shift, and go to state 64
    EQ        shift, and go to state 65
    GTE       shift, and go to state 66
    LTE       shift, and go to state 67
    NEQ       shift, and go to state 68
    GT        shift, and go to state 69
    LT        shift, and go to state 70

    $default  reduce using rule 32 (equationsp)

    equationsp  go to state 71
    addop       go to state 72


State 48

   41 term: factor . termp

    MULTIPLY  shift, and go to state 73
    DIVISION  shift, and go to state 74
    MOD       shift, and go to state 75
    AND       shift, and go to state 76
    OR        shift, and go to state 77

    $default  reduce using rule 43 (termp)

    termp  go to state 78
    mulop  go to state 79


State 49

   53 factor: function_call .

    $default  reduce using rule 53 (factor)


State 50

   26 assignment: IDENTIFIER ASSIGN . equations
   28           | IDENTIFIER ASSIGN . READ BEGIN_PARAM END_PARAM

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    READ        shift, and go to state 80
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 81
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 51

   54 function_call: IDENTIFIER BEGIN_PARAM . params END_PARAM

    NUMBER      shift, and go to state 82
    IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 57 (params)

    params  go to state 84
    param   go to state 85


State 52

   29 arraycall: IDENTIFIER L_PAREN . param R_PAREN

    NUMBER      shift, and go to state 82
    IDENTIFIER  shift, and go to state 83

    param  go to state 86


State 53

    4 function: INTEGER FUNCTION function_ident BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY .

    $default  reduce using rule 4 (function)


State 54

   11 statements: statement SEMICOLON . statements

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 87
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 55

   12 statements: nonsemicolonstatement statements .

    $default  reduce using rule 12 (statements)


State 56

   27 assignment: arraycall ASSIGN . equations

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 88
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 57

   23 declaration: INTEGER IDENTIFIER ASSIGN . equations
   25            | INTEGER IDENTIFIER ASSIGN . READ BEGIN_PARAM END_PARAM

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    READ        shift, and go to state 89
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 90
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 58

   24 declaration: ARRAY IDENTIFIER L_PAREN . factor R_PAREN

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    factor         go to state 91
    function_call  go to state 49


State 59

   60 if_start: IF BEGIN_PARAM equations . END_PARAM BEGIN_BODY statements END_BODY branch_check

    END_PARAM  shift, and go to state 92


State 60

   65 until_loop: WHILE BEGIN_PARAM equations . END_PARAM BEGIN_BODY statements END_BODY

    END_PARAM  shift, and go to state 93


State 61

   17 statement: WRITE BEGIN_PARAM equations . END_PARAM

    END_PARAM  shift, and go to state 94


State 62

   49 factor: L_PAREN equations . R_PAREN

    R_PAREN  shift, and go to state 95


State 63

   33 addop: ADD .

    $default  reduce using rule 33 (addop)


State 64

   34 addop: SUBTRACT .

    $default  reduce using rule 34 (addop)


State 65

   35 addop: EQ .

    $default  reduce using rule 35 (addop)


State 66

   36 addop: GTE .

    $default  reduce using rule 36 (addop)


State 67

   37 addop: LTE .

    $default  reduce using rule 37 (addop)


State 68

   38 addop: NEQ .

    $default  reduce using rule 38 (addop)


State 69

   39 addop: GT .

    $default  reduce using rule 39 (addop)


State 70

   40 addop: LT .

    $default  reduce using rule 40 (addop)


State 71

   30 equations: term equationsp .

    $default  reduce using rule 30 (equations)


State 72

   31 equationsp: addop . term equationsp

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    term           go to state 96
    factor         go to state 48
    function_call  go to state 49


State 73

   44 mulop: MULTIPLY .

    $default  reduce using rule 44 (mulop)


State 74

   45 mulop: DIVISION .

    $default  reduce using rule 45 (mulop)


State 75

   46 mulop: MOD .

    $default  reduce using rule 46 (mulop)


State 76

   47 mulop: AND .

    $default  reduce using rule 47 (mulop)


State 77

   48 mulop: OR .

    $default  reduce using rule 48 (mulop)


State 78

   41 term: factor termp .

    $default  reduce using rule 41 (term)


State 79

   42 termp: mulop . factor termp

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    factor         go to state 97
    function_call  go to state 49


State 80

   28 assignment: IDENTIFIER ASSIGN READ . BEGIN_PARAM END_PARAM

    BEGIN_PARAM  shift, and go to state 98


State 81

   26 assignment: IDENTIFIER ASSIGN equations .

    $default  reduce using rule 26 (assignment)


State 82

   59 param: NUMBER .

    $default  reduce using rule 59 (param)


State 83

   58 param: IDENTIFIER .

    $default  reduce using rule 58 (param)


State 84

   54 function_call: IDENTIFIER BEGIN_PARAM params . END_PARAM

    END_PARAM  shift, and go to state 99


State 85

   55 params: param .
   56       | param . COMMA params

    COMMA  shift, and go to state 100

    $default  reduce using rule 55 (params)


State 86

   29 arraycall: IDENTIFIER L_PAREN param . R_PAREN

    R_PAREN  shift, and go to state 101


State 87

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 88

   27 assignment: arraycall ASSIGN equations .

    $default  reduce using rule 27 (assignment)


State 89

   25 declaration: INTEGER IDENTIFIER ASSIGN READ . BEGIN_PARAM END_PARAM

    BEGIN_PARAM  shift, and go to state 102


State 90

   23 declaration: INTEGER IDENTIFIER ASSIGN equations .

    $default  reduce using rule 23 (declaration)


State 91

   24 declaration: ARRAY IDENTIFIER L_PAREN factor . R_PAREN

    R_PAREN  shift, and go to state 103


State 92

   60 if_start: IF BEGIN_PARAM equations END_PARAM . BEGIN_BODY statements END_BODY branch_check

    BEGIN_BODY  shift, and go to state 104


State 93

   65 until_loop: WHILE BEGIN_PARAM equations END_PARAM . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 105


State 94

   17 statement: WRITE BEGIN_PARAM equations END_PARAM .

    $default  reduce using rule 17 (statement)


State 95

   49 factor: L_PAREN equations R_PAREN .

    $default  reduce using rule 49 (factor)


State 96

   31 equationsp: addop term . equationsp

    ADD       shift, and go to state 63
    SUBTRACT  shift, and go to state 64
    EQ        shift, and go to state 65
    GTE       shift, and go to state 66
    LTE       shift, and go to state 67
    NEQ       shift, and go to state 68
    GT        shift, and go to state 69
    LT        shift, and go to state 70

    $default  reduce using rule 32 (equationsp)

    equationsp  go to state 106
    addop       go to state 72


State 97

   42 termp: mulop factor . termp

    MULTIPLY  shift, and go to state 73
    DIVISION  shift, and go to state 74
    MOD       shift, and go to state 75
    AND       shift, and go to state 76
    OR        shift, and go to state 77

    $default  reduce using rule 43 (termp)

    termp  go to state 107
    mulop  go to state 79


State 98

   28 assignment: IDENTIFIER ASSIGN READ BEGIN_PARAM . END_PARAM

    END_PARAM  shift, and go to state 108


State 99

   54 function_call: IDENTIFIER BEGIN_PARAM params END_PARAM .

    $default  reduce using rule 54 (function_call)


State 100

   56 params: param COMMA . params

    NUMBER      shift, and go to state 82
    IDENTIFIER  shift, and go to state 83

    $default  reduce using rule 57 (params)

    params  go to state 109
    param   go to state 85


State 101

   29 arraycall: IDENTIFIER L_PAREN param R_PAREN .

    $default  reduce using rule 29 (arraycall)


State 102

   25 declaration: INTEGER IDENTIFIER ASSIGN READ BEGIN_PARAM . END_PARAM

    END_PARAM  shift, and go to state 110


State 103

   24 declaration: ARRAY IDENTIFIER L_PAREN factor R_PAREN .

    $default  reduce using rule 24 (declaration)


State 104

   60 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY . statements END_BODY branch_check

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 111
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 105

   65 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 112
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 106

   31 equationsp: addop term equationsp .

    $default  reduce using rule 31 (equationsp)


State 107

   42 termp: mulop factor termp .

    $default  reduce using rule 42 (termp)


State 108

   28 assignment: IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM .

    $default  reduce using rule 28 (assignment)


State 109

   56 params: param COMMA params .

    $default  reduce using rule 56 (params)


State 110

   25 declaration: INTEGER IDENTIFIER ASSIGN READ BEGIN_PARAM END_PARAM .

    $default  reduce using rule 25 (declaration)


State 111

   60 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements . END_BODY branch_check

    END_BODY  shift, and go to state 113


State 112

   65 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 114


State 113

   60 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY . branch_check

    ELSE     shift, and go to state 115
    ELSE_IF  shift, and go to state 116

    $default  reduce using rule 63 (else_check)

    branch_check  go to state 117
    else_check    go to state 118


State 114

   65 until_loop: WHILE BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY .

    $default  reduce using rule 65 (until_loop)


State 115

   64 else_check: ELSE . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 119


State 116

   61 branch_check: ELSE_IF . BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY else_check

    BEGIN_PARAM  shift, and go to state 120


State 117

   60 if_start: IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY branch_check .

    $default  reduce using rule 60 (if_start)


State 118

   62 branch_check: else_check .

    $default  reduce using rule 62 (branch_check)


State 119

   64 else_check: ELSE BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 121
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 120

   61 branch_check: ELSE_IF BEGIN_PARAM . equations END_PARAM BEGIN_BODY statements END_BODY else_check

    INTEGER     shift, and go to state 42
    L_PAREN     shift, and go to state 43
    NUMBER      shift, and go to state 44
    IDENTIFIER  shift, and go to state 45

    equations      go to state 122
    term           go to state 47
    factor         go to state 48
    function_call  go to state 49


State 121

   64 else_check: ELSE BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 123


State 122

   61 branch_check: ELSE_IF BEGIN_PARAM equations . END_PARAM BEGIN_BODY statements END_BODY else_check

    END_PARAM  shift, and go to state 124


State 123

   64 else_check: ELSE BEGIN_BODY statements END_BODY .

    $default  reduce using rule 64 (else_check)


State 124

   61 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM . BEGIN_BODY statements END_BODY else_check

    BEGIN_BODY  shift, and go to state 125


State 125

   61 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY . statements END_BODY else_check

    INTEGER     shift, and go to state 19
    ARRAY       shift, and go to state 20
    IF          shift, and go to state 21
    WHILE       shift, and go to state 22
    BREAK       shift, and go to state 23
    CONTINUE    shift, and go to state 24
    WRITE       shift, and go to state 25
    RETURN      shift, and go to state 26
    IDENTIFIER  shift, and go to state 27

    $default  reduce using rule 10 (statements)

    statements             go to state 126
    statement              go to state 29
    nonsemicolonstatement  go to state 30
    declaration            go to state 31
    assignment             go to state 32
    arraycall              go to state 33
    function_call          go to state 34
    if_start               go to state 35
    until_loop             go to state 36


State 126

   61 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements . END_BODY else_check

    END_BODY  shift, and go to state 127


State 127

   61 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY . else_check

    ELSE  shift, and go to state 115

    $default  reduce using rule 63 (else_check)

    else_check  go to state 128


State 128

   61 branch_check: ELSE_IF BEGIN_PARAM equations END_PARAM BEGIN_BODY statements END_BODY else_check .

    $default  reduce using rule 61 (branch_check)
