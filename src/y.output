Terminals unused in grammar

   ARRAY
   FUNCTION
   BREAK
   CONTINUE
   READ
   WRITE
   RETURN
   NUMBER


State 0 conflicts: 1 reduce/reduce
State 59 conflicts: 1 shift/reduce
State 105 conflicts: 1 reduce/reduce


Grammar

    0 $accept: prog_start $end

    1 prog_start: %empty
    2           | functions

    3 functions: %empty
    4          | function functions

    5 function: INTEGER IDENTIFIER BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    6 arguments: argument
    7          | argument COMMA arguments

    8 argument: %empty
    9         | INTEGER IDENTIFIER

   10 statements: %empty
   11           | statement SEMICOLON statements

   12 statement: declaration
   13          | assignment
   14          | function_call
   15          | if_start
   16          | until_loop

   17 declaration: INTEGER IDENTIFIER
   18            | INTEGER IDENTIFIER ASSIGN equations

   19 assignment: IDENTIFIER ASSIGN equations

   20 equations: term equationsp

   21 equationsp: addop term equationsp
   22           | %empty

   23 addop: ADD
   24      | SUBTRACT

   25 term: factor termp

   26 termp: mulop factor termp
   27      | %empty

   28 mulop: MULTIPLY
   29      | DIVISION
   30      | MOD

   31 factor: L_PAREN equations R_PAREN
   32       | INTEGER
   33       | IDENTIFIER
   34       | function_call

   35 function_call: IDENTIFIER BEGIN_PARAM params END_PARAM

   36 params: %empty
   37       | param
   38       | param COMMA params

   39 param: IDENTIFIER
   40      | INTEGER

   41 if_start: IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY branch_check

   42 if_check: fin if_checkp
   43         | L_PAREN fin R_PAREN if_checkp

   44 if_checkp: %empty
   45          | boolop fin if_checkp

   46 boolop: AND
   47       | OR

   48 fin: finp compare
   49    | L_PAREN finp R_PAREN compare

   50 compare: %empty
   51        | compop finp compare

   52 finp: INTEGER
   53     | IDENTIFIER
   54     | function_call

   55 compop: EQ
   56       | GTE
   57       | LTE
   58       | NEQ
   59       | GT
   60       | LT

   61 branch_check: %empty
   62             | ELSE_IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY else_check
   63             | else_check

   64 else_check: %empty
   65           | ELSE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY else_check

   66 until_loop: WHILE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 5 9 17 18 32 40 52
ARRAY (259)
FUNCTION (260)
ASSIGN (261) 18 19
ADD (262) 23
SUBTRACT (263) 24
MULTIPLY (264) 28
DIVISION (265) 29
MOD (266) 30
EQ (267) 55
GTE (268) 56
LTE (269) 57
NEQ (270) 58
GT (271) 59
LT (272) 60
BEGIN_BODY (273) 5 41 62 65 66
END_BODY (274) 5 41 62 65 66
BEGIN_PARAM (275) 5 35 41 62 65 66
END_PARAM (276) 5 35 41 62 65 66
L_PAREN (277) 31 43 49
R_PAREN (278) 31 43 49
IF (279) 41
ELSE (280) 65
ELSE_IF (281) 62
WHILE (282) 66
BREAK (283)
CONTINUE (284)
READ (285)
WRITE (286)
RETURN (287)
SEMICOLON (288) 11
COMMA (289) 7 38
NUMBER (290)
IDENTIFIER (291) 5 9 17 18 19 33 35 39 53
AND (292) 46
OR (293) 47


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
prog_start (40)
    on left: 1 2, on right: 0
functions (41)
    on left: 3 4, on right: 2 4
function (42)
    on left: 5, on right: 4
arguments (43)
    on left: 6 7, on right: 5 7
argument (44)
    on left: 8 9, on right: 6 7
statements (45)
    on left: 10 11, on right: 5 11 41 62 65 66
statement (46)
    on left: 12 13 14 15 16, on right: 11
declaration (47)
    on left: 17 18, on right: 12
assignment (48)
    on left: 19, on right: 13
equations (49)
    on left: 20, on right: 18 19 31
equationsp (50)
    on left: 21 22, on right: 20 21
addop (51)
    on left: 23 24, on right: 21
term (52)
    on left: 25, on right: 20 21
termp (53)
    on left: 26 27, on right: 25 26
mulop (54)
    on left: 28 29 30, on right: 26
factor (55)
    on left: 31 32 33 34, on right: 25 26
function_call (56)
    on left: 35, on right: 14 34 54
params (57)
    on left: 36 37 38, on right: 35 38
param (58)
    on left: 39 40, on right: 37 38
if_start (59)
    on left: 41, on right: 15
if_check (60)
    on left: 42 43, on right: 41 62 65 66
if_checkp (61)
    on left: 44 45, on right: 42 43 45
boolop (62)
    on left: 46 47, on right: 45
fin (63)
    on left: 48 49, on right: 42 43 45
compare (64)
    on left: 50 51, on right: 48 49 51
finp (65)
    on left: 52 53 54, on right: 48 49 51
compop (66)
    on left: 55 56 57 58 59 60, on right: 51
branch_check (67)
    on left: 61 62 63, on right: 41
else_check (68)
    on left: 64 65, on right: 62 63 65
until_loop (69)
    on left: 66, on right: 16


State 0

    0 $accept: . prog_start $end

    INTEGER  shift, and go to state 1

    $end      reduce using rule 1 (prog_start)
    $end      [reduce using rule 3 (functions)]
    $default  reduce using rule 1 (prog_start)

    prog_start  go to state 2
    functions   go to state 3
    function    go to state 4


State 1

    5 function: INTEGER . IDENTIFIER BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    IDENTIFIER  shift, and go to state 5


State 2

    0 $accept: prog_start . $end

    $end  shift, and go to state 6


State 3

    2 prog_start: functions .

    $default  reduce using rule 2 (prog_start)


State 4

    4 functions: function . functions

    INTEGER  shift, and go to state 1

    $default  reduce using rule 3 (functions)

    functions  go to state 7
    function   go to state 4


State 5

    5 function: INTEGER IDENTIFIER . BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY

    BEGIN_PARAM  shift, and go to state 8


State 6

    0 $accept: prog_start $end .

    $default  accept


State 7

    4 functions: function functions .

    $default  reduce using rule 4 (functions)


State 8

    5 function: INTEGER IDENTIFIER BEGIN_PARAM . arguments END_PARAM BEGIN_BODY statements END_BODY

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 10
    argument   go to state 11


State 9

    9 argument: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 12


State 10

    5 function: INTEGER IDENTIFIER BEGIN_PARAM arguments . END_PARAM BEGIN_BODY statements END_BODY

    END_PARAM  shift, and go to state 13


State 11

    6 arguments: argument .
    7          | argument . COMMA arguments

    COMMA  shift, and go to state 14

    $default  reduce using rule 6 (arguments)


State 12

    9 argument: INTEGER IDENTIFIER .

    $default  reduce using rule 9 (argument)


State 13

    5 function: INTEGER IDENTIFIER BEGIN_PARAM arguments END_PARAM . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 15


State 14

    7 arguments: argument COMMA . arguments

    INTEGER  shift, and go to state 9

    $default  reduce using rule 8 (argument)

    arguments  go to state 16
    argument   go to state 11


State 15

    5 function: INTEGER IDENTIFIER BEGIN_PARAM arguments END_PARAM BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 10 (statements)

    statements     go to state 21
    statement      go to state 22
    declaration    go to state 23
    assignment     go to state 24
    function_call  go to state 25
    if_start       go to state 26
    until_loop     go to state 27


State 16

    7 arguments: argument COMMA arguments .

    $default  reduce using rule 7 (arguments)


State 17

   17 declaration: INTEGER . IDENTIFIER
   18            | INTEGER . IDENTIFIER ASSIGN equations

    IDENTIFIER  shift, and go to state 28


State 18

   41 if_start: IF . BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY branch_check

    BEGIN_PARAM  shift, and go to state 29


State 19

   66 until_loop: WHILE . BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY

    BEGIN_PARAM  shift, and go to state 30


State 20

   19 assignment: IDENTIFIER . ASSIGN equations
   35 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM

    ASSIGN       shift, and go to state 31
    BEGIN_PARAM  shift, and go to state 32


State 21

    5 function: INTEGER IDENTIFIER BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 33


State 22

   11 statements: statement . SEMICOLON statements

    SEMICOLON  shift, and go to state 34


State 23

   12 statement: declaration .

    $default  reduce using rule 12 (statement)


State 24

   13 statement: assignment .

    $default  reduce using rule 13 (statement)


State 25

   14 statement: function_call .

    $default  reduce using rule 14 (statement)


State 26

   15 statement: if_start .

    $default  reduce using rule 15 (statement)


State 27

   16 statement: until_loop .

    $default  reduce using rule 16 (statement)


State 28

   17 declaration: INTEGER IDENTIFIER .
   18            | INTEGER IDENTIFIER . ASSIGN equations

    ASSIGN  shift, and go to state 35

    $default  reduce using rule 17 (declaration)


State 29

   41 if_start: IF BEGIN_PARAM . if_check END_PARAM BEGIN_BODY statements END_BODY branch_check

    INTEGER     shift, and go to state 36
    L_PAREN     shift, and go to state 37
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    if_check       go to state 40
    fin            go to state 41
    finp           go to state 42


State 30

   66 until_loop: WHILE BEGIN_PARAM . if_check END_PARAM BEGIN_BODY statements END_BODY

    INTEGER     shift, and go to state 36
    L_PAREN     shift, and go to state 37
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    if_check       go to state 43
    fin            go to state 41
    finp           go to state 42


State 31

   19 assignment: IDENTIFIER ASSIGN . equations

    INTEGER     shift, and go to state 44
    L_PAREN     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46

    equations      go to state 47
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 32

   35 function_call: IDENTIFIER BEGIN_PARAM . params END_PARAM

    INTEGER     shift, and go to state 51
    IDENTIFIER  shift, and go to state 52

    $default  reduce using rule 36 (params)

    params  go to state 53
    param   go to state 54


State 33

    5 function: INTEGER IDENTIFIER BEGIN_PARAM arguments END_PARAM BEGIN_BODY statements END_BODY .

    $default  reduce using rule 5 (function)


State 34

   11 statements: statement SEMICOLON . statements

    INTEGER     shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 10 (statements)

    statements     go to state 55
    statement      go to state 22
    declaration    go to state 23
    assignment     go to state 24
    function_call  go to state 25
    if_start       go to state 26
    until_loop     go to state 27


State 35

   18 declaration: INTEGER IDENTIFIER ASSIGN . equations

    INTEGER     shift, and go to state 44
    L_PAREN     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46

    equations      go to state 56
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 36

   52 finp: INTEGER .

    $default  reduce using rule 52 (finp)


State 37

   43 if_check: L_PAREN . fin R_PAREN if_checkp
   49 fin: L_PAREN . finp R_PAREN compare

    INTEGER     shift, and go to state 36
    L_PAREN     shift, and go to state 57
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    fin            go to state 58
    finp           go to state 59


State 38

   35 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM
   53 finp: IDENTIFIER .

    BEGIN_PARAM  shift, and go to state 32

    $default  reduce using rule 53 (finp)


State 39

   54 finp: function_call .

    $default  reduce using rule 54 (finp)


State 40

   41 if_start: IF BEGIN_PARAM if_check . END_PARAM BEGIN_BODY statements END_BODY branch_check

    END_PARAM  shift, and go to state 60


State 41

   42 if_check: fin . if_checkp

    AND  shift, and go to state 61
    OR   shift, and go to state 62

    $default  reduce using rule 44 (if_checkp)

    if_checkp  go to state 63
    boolop     go to state 64


State 42

   48 fin: finp . compare

    EQ   shift, and go to state 65
    GTE  shift, and go to state 66
    LTE  shift, and go to state 67
    NEQ  shift, and go to state 68
    GT   shift, and go to state 69
    LT   shift, and go to state 70

    $default  reduce using rule 50 (compare)

    compare  go to state 71
    compop   go to state 72


State 43

   66 until_loop: WHILE BEGIN_PARAM if_check . END_PARAM BEGIN_BODY statements END_BODY

    END_PARAM  shift, and go to state 73


State 44

   32 factor: INTEGER .

    $default  reduce using rule 32 (factor)


State 45

   31 factor: L_PAREN . equations R_PAREN

    INTEGER     shift, and go to state 44
    L_PAREN     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46

    equations      go to state 74
    term           go to state 48
    factor         go to state 49
    function_call  go to state 50


State 46

   33 factor: IDENTIFIER .
   35 function_call: IDENTIFIER . BEGIN_PARAM params END_PARAM

    BEGIN_PARAM  shift, and go to state 32

    $default  reduce using rule 33 (factor)


State 47

   19 assignment: IDENTIFIER ASSIGN equations .

    $default  reduce using rule 19 (assignment)


State 48

   20 equations: term . equationsp

    ADD       shift, and go to state 75
    SUBTRACT  shift, and go to state 76

    $default  reduce using rule 22 (equationsp)

    equationsp  go to state 77
    addop       go to state 78


State 49

   25 term: factor . termp

    MULTIPLY  shift, and go to state 79
    DIVISION  shift, and go to state 80
    MOD       shift, and go to state 81

    $default  reduce using rule 27 (termp)

    termp  go to state 82
    mulop  go to state 83


State 50

   34 factor: function_call .

    $default  reduce using rule 34 (factor)


State 51

   40 param: INTEGER .

    $default  reduce using rule 40 (param)


State 52

   39 param: IDENTIFIER .

    $default  reduce using rule 39 (param)


State 53

   35 function_call: IDENTIFIER BEGIN_PARAM params . END_PARAM

    END_PARAM  shift, and go to state 84


State 54

   37 params: param .
   38       | param . COMMA params

    COMMA  shift, and go to state 85

    $default  reduce using rule 37 (params)


State 55

   11 statements: statement SEMICOLON statements .

    $default  reduce using rule 11 (statements)


State 56

   18 declaration: INTEGER IDENTIFIER ASSIGN equations .

    $default  reduce using rule 18 (declaration)


State 57

   49 fin: L_PAREN . finp R_PAREN compare

    INTEGER     shift, and go to state 36
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    finp           go to state 86


State 58

   43 if_check: L_PAREN fin . R_PAREN if_checkp

    R_PAREN  shift, and go to state 87


State 59

   48 fin: finp . compare
   49    | L_PAREN finp . R_PAREN compare

    EQ       shift, and go to state 65
    GTE      shift, and go to state 66
    LTE      shift, and go to state 67
    NEQ      shift, and go to state 68
    GT       shift, and go to state 69
    LT       shift, and go to state 70
    R_PAREN  shift, and go to state 88

    R_PAREN  [reduce using rule 50 (compare)]

    compare  go to state 71
    compop   go to state 72


State 60

   41 if_start: IF BEGIN_PARAM if_check END_PARAM . BEGIN_BODY statements END_BODY branch_check

    BEGIN_BODY  shift, and go to state 89


State 61

   46 boolop: AND .

    $default  reduce using rule 46 (boolop)


State 62

   47 boolop: OR .

    $default  reduce using rule 47 (boolop)


State 63

   42 if_check: fin if_checkp .

    $default  reduce using rule 42 (if_check)


State 64

   45 if_checkp: boolop . fin if_checkp

    INTEGER     shift, and go to state 36
    L_PAREN     shift, and go to state 57
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    fin            go to state 90
    finp           go to state 42


State 65

   55 compop: EQ .

    $default  reduce using rule 55 (compop)


State 66

   56 compop: GTE .

    $default  reduce using rule 56 (compop)


State 67

   57 compop: LTE .

    $default  reduce using rule 57 (compop)


State 68

   58 compop: NEQ .

    $default  reduce using rule 58 (compop)


State 69

   59 compop: GT .

    $default  reduce using rule 59 (compop)


State 70

   60 compop: LT .

    $default  reduce using rule 60 (compop)


State 71

   48 fin: finp compare .

    $default  reduce using rule 48 (fin)


State 72

   51 compare: compop . finp compare

    INTEGER     shift, and go to state 36
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    finp           go to state 91


State 73

   66 until_loop: WHILE BEGIN_PARAM if_check END_PARAM . BEGIN_BODY statements END_BODY

    BEGIN_BODY  shift, and go to state 92


State 74

   31 factor: L_PAREN equations . R_PAREN

    R_PAREN  shift, and go to state 93


State 75

   23 addop: ADD .

    $default  reduce using rule 23 (addop)


State 76

   24 addop: SUBTRACT .

    $default  reduce using rule 24 (addop)


State 77

   20 equations: term equationsp .

    $default  reduce using rule 20 (equations)


State 78

   21 equationsp: addop . term equationsp

    INTEGER     shift, and go to state 44
    L_PAREN     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46

    term           go to state 94
    factor         go to state 49
    function_call  go to state 50


State 79

   28 mulop: MULTIPLY .

    $default  reduce using rule 28 (mulop)


State 80

   29 mulop: DIVISION .

    $default  reduce using rule 29 (mulop)


State 81

   30 mulop: MOD .

    $default  reduce using rule 30 (mulop)


State 82

   25 term: factor termp .

    $default  reduce using rule 25 (term)


State 83

   26 termp: mulop . factor termp

    INTEGER     shift, and go to state 44
    L_PAREN     shift, and go to state 45
    IDENTIFIER  shift, and go to state 46

    factor         go to state 95
    function_call  go to state 50


State 84

   35 function_call: IDENTIFIER BEGIN_PARAM params END_PARAM .

    $default  reduce using rule 35 (function_call)


State 85

   38 params: param COMMA . params

    INTEGER     shift, and go to state 51
    IDENTIFIER  shift, and go to state 52

    $default  reduce using rule 36 (params)

    params  go to state 96
    param   go to state 54


State 86

   49 fin: L_PAREN finp . R_PAREN compare

    R_PAREN  shift, and go to state 88


State 87

   43 if_check: L_PAREN fin R_PAREN . if_checkp

    AND  shift, and go to state 61
    OR   shift, and go to state 62

    $default  reduce using rule 44 (if_checkp)

    if_checkp  go to state 97
    boolop     go to state 64


State 88

   49 fin: L_PAREN finp R_PAREN . compare

    EQ   shift, and go to state 65
    GTE  shift, and go to state 66
    LTE  shift, and go to state 67
    NEQ  shift, and go to state 68
    GT   shift, and go to state 69
    LT   shift, and go to state 70

    $default  reduce using rule 50 (compare)

    compare  go to state 98
    compop   go to state 72


State 89

   41 if_start: IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY . statements END_BODY branch_check

    INTEGER     shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 10 (statements)

    statements     go to state 99
    statement      go to state 22
    declaration    go to state 23
    assignment     go to state 24
    function_call  go to state 25
    if_start       go to state 26
    until_loop     go to state 27


State 90

   45 if_checkp: boolop fin . if_checkp

    AND  shift, and go to state 61
    OR   shift, and go to state 62

    $default  reduce using rule 44 (if_checkp)

    if_checkp  go to state 100
    boolop     go to state 64


State 91

   51 compare: compop finp . compare

    EQ   shift, and go to state 65
    GTE  shift, and go to state 66
    LTE  shift, and go to state 67
    NEQ  shift, and go to state 68
    GT   shift, and go to state 69
    LT   shift, and go to state 70

    $default  reduce using rule 50 (compare)

    compare  go to state 101
    compop   go to state 72


State 92

   66 until_loop: WHILE BEGIN_PARAM if_check END_PARAM BEGIN_BODY . statements END_BODY

    INTEGER     shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 10 (statements)

    statements     go to state 102
    statement      go to state 22
    declaration    go to state 23
    assignment     go to state 24
    function_call  go to state 25
    if_start       go to state 26
    until_loop     go to state 27


State 93

   31 factor: L_PAREN equations R_PAREN .

    $default  reduce using rule 31 (factor)


State 94

   21 equationsp: addop term . equationsp

    ADD       shift, and go to state 75
    SUBTRACT  shift, and go to state 76

    $default  reduce using rule 22 (equationsp)

    equationsp  go to state 103
    addop       go to state 78


State 95

   26 termp: mulop factor . termp

    MULTIPLY  shift, and go to state 79
    DIVISION  shift, and go to state 80
    MOD       shift, and go to state 81

    $default  reduce using rule 27 (termp)

    termp  go to state 104
    mulop  go to state 83


State 96

   38 params: param COMMA params .

    $default  reduce using rule 38 (params)


State 97

   43 if_check: L_PAREN fin R_PAREN if_checkp .

    $default  reduce using rule 43 (if_check)


State 98

   49 fin: L_PAREN finp R_PAREN compare .

    $default  reduce using rule 49 (fin)


State 99

   41 if_start: IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements . END_BODY branch_check

    END_BODY  shift, and go to state 105


State 100

   45 if_checkp: boolop fin if_checkp .

    $default  reduce using rule 45 (if_checkp)


State 101

   51 compare: compop finp compare .

    $default  reduce using rule 51 (compare)


State 102

   66 until_loop: WHILE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements . END_BODY

    END_BODY  shift, and go to state 106


State 103

   21 equationsp: addop term equationsp .

    $default  reduce using rule 21 (equationsp)


State 104

   26 termp: mulop factor termp .

    $default  reduce using rule 26 (termp)


State 105

   41 if_start: IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY . branch_check

    ELSE     shift, and go to state 107
    ELSE_IF  shift, and go to state 108

    SEMICOLON  reduce using rule 61 (branch_check)
    SEMICOLON  [reduce using rule 64 (else_check)]
    $default   reduce using rule 61 (branch_check)

    branch_check  go to state 109
    else_check    go to state 110


State 106

   66 until_loop: WHILE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY .

    $default  reduce using rule 66 (until_loop)


State 107

   65 else_check: ELSE . BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY else_check

    BEGIN_PARAM  shift, and go to state 111


State 108

   62 branch_check: ELSE_IF . BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY else_check

    BEGIN_PARAM  shift, and go to state 112


State 109

   41 if_start: IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY branch_check .

    $default  reduce using rule 41 (if_start)


State 110

   63 branch_check: else_check .

    $default  reduce using rule 63 (branch_check)


State 111

   65 else_check: ELSE BEGIN_PARAM . if_check END_PARAM BEGIN_BODY statements END_BODY else_check

    INTEGER     shift, and go to state 36
    L_PAREN     shift, and go to state 37
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    if_check       go to state 113
    fin            go to state 41
    finp           go to state 42


State 112

   62 branch_check: ELSE_IF BEGIN_PARAM . if_check END_PARAM BEGIN_BODY statements END_BODY else_check

    INTEGER     shift, and go to state 36
    L_PAREN     shift, and go to state 37
    IDENTIFIER  shift, and go to state 38

    function_call  go to state 39
    if_check       go to state 114
    fin            go to state 41
    finp           go to state 42


State 113

   65 else_check: ELSE BEGIN_PARAM if_check . END_PARAM BEGIN_BODY statements END_BODY else_check

    END_PARAM  shift, and go to state 115


State 114

   62 branch_check: ELSE_IF BEGIN_PARAM if_check . END_PARAM BEGIN_BODY statements END_BODY else_check

    END_PARAM  shift, and go to state 116


State 115

   65 else_check: ELSE BEGIN_PARAM if_check END_PARAM . BEGIN_BODY statements END_BODY else_check

    BEGIN_BODY  shift, and go to state 117


State 116

   62 branch_check: ELSE_IF BEGIN_PARAM if_check END_PARAM . BEGIN_BODY statements END_BODY else_check

    BEGIN_BODY  shift, and go to state 118


State 117

   65 else_check: ELSE BEGIN_PARAM if_check END_PARAM BEGIN_BODY . statements END_BODY else_check

    INTEGER     shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 10 (statements)

    statements     go to state 119
    statement      go to state 22
    declaration    go to state 23
    assignment     go to state 24
    function_call  go to state 25
    if_start       go to state 26
    until_loop     go to state 27


State 118

   62 branch_check: ELSE_IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY . statements END_BODY else_check

    INTEGER     shift, and go to state 17
    IF          shift, and go to state 18
    WHILE       shift, and go to state 19
    IDENTIFIER  shift, and go to state 20

    $default  reduce using rule 10 (statements)

    statements     go to state 120
    statement      go to state 22
    declaration    go to state 23
    assignment     go to state 24
    function_call  go to state 25
    if_start       go to state 26
    until_loop     go to state 27


State 119

   65 else_check: ELSE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements . END_BODY else_check

    END_BODY  shift, and go to state 121


State 120

   62 branch_check: ELSE_IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements . END_BODY else_check

    END_BODY  shift, and go to state 122


State 121

   65 else_check: ELSE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY . else_check

    ELSE  shift, and go to state 107

    $default  reduce using rule 64 (else_check)

    else_check  go to state 123


State 122

   62 branch_check: ELSE_IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY . else_check

    ELSE  shift, and go to state 107

    $default  reduce using rule 64 (else_check)

    else_check  go to state 124


State 123

   65 else_check: ELSE BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY else_check .

    $default  reduce using rule 65 (else_check)


State 124

   62 branch_check: ELSE_IF BEGIN_PARAM if_check END_PARAM BEGIN_BODY statements END_BODY else_check .

    $default  reduce using rule 62 (branch_check)
